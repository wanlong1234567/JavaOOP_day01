回顾:
1.方法:函数、过程
    封装一段特定的业务逻辑功能
	尽可能的独立，一个方法只干一件事
	可以被反复调用多次
	减少代码重复，有利于代码维护，有利于团队协作开发
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
3.方法的调用:
  3.1)无返回值: 方法名(有参传参);
  3.2)有返回值: 数据类型 变量 = 方法名(有参传参);
                方法名(有参传参);---------不建议
4.return:
  4.1)return 值; 1)结束方法 2)返回结果给调用方
  4.2)return;    1)结束方法



笔记:
1.什么是类？什么是对象？
  1)现实世界是由很多很多对象组成的
    基于对象抽出了类
  2)对象:真实存在的单个的个体
    类:类别/类型，代表一类个体
  3)类中可以包含:
    3.1)所有对象所共有的属性/特征----------成员变量
	3.2)所有对象所共有的行为---------------方法
  4)一个类可以创建多个对象
    同一类型的多个对象，结构相同，数据不同
  5)类是对象的模板，对象是类的具体的实例
2.如何创建类？如何创建对象？如何访问成员？
3.引用类型之间画等号:
  1)指向同一个对象
  2)对其中一个引用的修改会影响另一个引用(对象只有一个)
    eg: 房子钥匙
  基本类型之间画等号:
  1)赋值
  2)对其中一个变量的修改不会影响另一个变量(数据是两份)
    eg: 身份证复印件
4.null:空，没有指向任何对象
       若引用的值为null，则该引用不能再进行任何操作了，
	   若操作则NullPointerException空指针异常



练习:
1.完成Emp和EmpManager类
2.完成Cell和CellTest类:--至少两次(其中有一次oo.day02包中)
  1)Cell类，包含:
    1.1)成员变量:row,col
	1.2)方法:void drop(){}
	         void moveLeft(int n){}
			 String getCellInfo(){}
  2)CellTest类，包含:
    2.1)main()方法:创建格子对象并调用printWall()测试
	2.2)printWall(Cell cc)方法:打墙+打格


















RefNullDemo















房子:对象
房子钥匙:引用
配一把钥匙:引用
















1)找对象:找到很多很多的小格子
2)抽类:格子类Cell
3)设计类中的成员变量和方法:
4)创建对象并测试:


new Student();
new Student();




数据类型  引用  指向    对象
Cell       c     =      new Cell();














           引用
数据类型  引用类型变量   指向    对象
Student    zs              =     new Student();


    基本类型变量(变量)
int  a;












Cell
CellTest


class Cell{ //格子类
  int row; //行号
  int col; //列号

  void drop(){ //下落1格
    row++;
  }
  void moveLeft(int n){ //左移n格
    col-=n;
  }
  String getCellInfo(){ //获取行号和列号
    return row+","+col;
  }
}

















int[] arr = new int[3]; //0,0,0








oo.day01
Student
StudentTest



Student
StudentTest----------测试类



















类             对象
月饼模子      月饼









Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "河北廊坊";
zs.stuId = "0001";
zs.eat();
zs.sleep();
zs.study();
zs.abc = 250; //编译错误

Student ls = new Student();
ls.name = "lisi";
ls.age = 26;
ls.address = "黑龙江佳木斯";
ls.stuId = "002";
ls.eat();
ls.sleep();
ls.study();





String zsName = "zhangsan";
int zsAge = 25;
String zsAddress = "廊坊";

String lsName = "lisi";
int lsAge = 26;
String lsAddress = "佳木斯";






class Student{
  String name;
  int age;
  String address;
  String stuId;
  void eat(){}
  void sleep(){}
  void study(){}
}


Student zs = new Student();
Student ls = new Student();
Student ww = new Student();











class Teacher{
  String name;
  int age;
  String address;
  double salary;
  void eat(){}
  void sleep(){}
  void teach(){}
}
class Student{
  String name;
  int age;
  String address;
  String stuId;
  void eat(){}
  void sleep(){}
  void study(){}
}
class Dog{
  String type;
  String color;
  void 叫(){}
}
class Car{
  String type;
  String color;
  double price;
  void 前进(){}
  void 后退(){}
  void 停止(){}
}





对象                  类
WKJ                  老师
SLP
ZWJ

张三                 学生
李四
王五

小花                 狗
小黑
小强

奥迪                 汽车
奥拓
马六










基本类型-------------------只能装一个数据
数组-----------------------必须相同类型
自己造个数据类型-----------想装什么就装什么


面向过程的结构化程序设计弊端:
1)缺乏对数据的封装
2)数据与方法(操作数据)的分离



class Emp{ //Emp就是我自己造的一个数据类型
  String name;
  int age;
  double salary;
  void print(){
    System.out.println("name="+name);
	System.out.println("age="+age);
	System.out.println("salary="+salary);
  }
}

class Test{
  public static void main(String[] args){
    Emp e = new Emp(); //创建了一个雇员对象
    e.name = "zhangsan";
	e.age = 25;
	e.salary = 5000;
	e.print();
  }
  
}















高质量的代码:
  复用性好、扩展性好、维护性好、
  可移植性好、健壮性好、可读性好、
  效率好、用户体验好......















清华思路--------------MIS,GIS，环保

四个人花费2个月的时间----------做一套框架

福州夜间施工项目---------------30万

1个人每天最多1个小时，一周时间----------5个小时







.net
Java------------------重新做

某和--------------OA

国家政府机构----------------


产品--------------做好以后可以给很多家公司用
项目--------------只能适应一家公司用
















语言基础:简单
1)固定、画一个圆形
2)去银行取钱
3)猜字符小游戏


面向对象:难
1)抽象、画一个图形
2)向着社会主义社会发展
3)射击游戏













面向对象(OO)
OOA------------------面向对象分析
OOD------------------面向对象设计

OOAD-----------------面向对象分析与设计
OOP------------------面向对象编程














请输入游戏等级(5、7、9):6
请输入游戏等级(5、7、9):4
请输入游戏等级(5、7、9):8
请输入游戏等级(5、7、9):3
请输入游戏等级(5、7、9):2
请输入游戏等级(5、7、9):7
ABCDEFG













generateArray(5,100);
generateArray(10,1000);

public static int[] generateArray(int len,int max){
  int[] arr = new int[len];
  for(int i=0;i<arr.length;i++){
    arr[i] = (int)(Math.random()*max);
  }
  return arr;
}













